import { NextResponse } from "next/server";
import { GoogleGenerativeAI } from "@google/generative-ai";
import TelegramBot from "node-telegram-bot-api";
import PDFDocument from "pdfkit";
import fs from "fs";
import path from "path";
import os from "os";

// Initialize the Google Generative AI client
const GEMINI_API_KEY = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
console.log("PDF_REPORT - Gemini API Key:", GEMINI_API_KEY ? "Key exists" : "Key missing");
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

// Initialize the Telegram bot with the token
const TELEGRAM_BOT_TOKEN = process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN;
console.log("PDF_REPORT - Telegram Bot Token:", TELEGRAM_BOT_TOKEN ? "Token exists" : "Token missing");
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN);

// Helper function to get sample data (replace with your DB queries in production)
function getSampleData() {
    return {
        users: {
            "Th√°ng 1": 42, "Th√°ng 2": 50, "Th√°ng 3": 47, "Th√°ng 4": 60,
            "Th√°ng 5": 58, "Th√°ng 6": 65, "Th√°ng 7": 63, "Th√°ng 8": 70,
            "Th√°ng 9": 68, "Th√°ng 10": 75, "Th√°ng 11": 80, "Th√°ng 12": 78
        },
        posts: {
            "Th√°ng 1": 30, "Th√°ng 2": 28, "Th√°ng 3": 35, "Th√°ng 4": 33,
            "Th√°ng 5": 40, "Th√°ng 6": 38, "Th√°ng 7": 45, "Th√°ng 8": 42,
            "Th√°ng 9": 50, "Th√°ng 10": 48, "Th√°ng 11": 55, "Th√°ng 12": 52
        },
        groups: {
            "Th√°ng 1": 10, "Th√°ng 2": 12, "Th√°ng 3": 9, "Th√°ng 4": 14,
            "Th√°ng 5": 13, "Th√°ng 6": 16, "Th√°ng 7": 15, "Th√°ng 8": 17,
            "Th√°ng 9": 20, "Th√°ng 10": 18, "Th√°ng 11": 21, "Th√°ng 12": 19
        },
        movies: {
            "Th√°ng 1": 25, "Th√°ng 2": 30, "Th√°ng 3": 28, "Th√°ng 4": 35,
            "Th√°ng 5": 33, "Th√°ng 6": 40, "Th√°ng 7": 38, "Th√°ng 8": 45,
            "Th√°ng 9": 43, "Th√°ng 10": 50, "Th√°ng 11": 48, "Th√°ng 12": 55
        },
        ratings: {
            "Th√°ng 1": 15, "Th√°ng 2": 17, "Th√°ng 3": 14, "Th√°ng 4": 18,
            "Th√°ng 5": 20, "Th√°ng 6": 19, "Th√°ng 7": 22, "Th√°ng 8": 21,
            "Th√°ng 9": 25, "Th√°ng 10": 24, "Th√°ng 11": 26, "Th√°ng 12": 27
        },
        actors: {
            "Th√°ng 1": 22, "Th√°ng 2": 25, "Th√°ng 3": 23, "Th√°ng 4": 28,
            "Th√°ng 5": 26, "Th√°ng 6": 30, "Th√°ng 7": 29, "Th√°ng 8": 33,
            "Th√°ng 9": 32, "Th√°ng 10": 35, "Th√°ng 11": 37, "Th√°ng 12": 36
        }
    };
}

// Generate a report using Gemini AI
async function generateReportWithGemini(data) {
    try {
        console.log("PDF_REPORT - Preparing Gemini prompt");
        // Prepare the prompt for Gemini
        const prompt = `
D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu th·ªëng k√™ ho·∫°t ƒë·ªông trong nƒÉm 2025, bao g·ªìm s·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng, b√†i vi·∫øt, nh√≥m, phim, ƒë√°nh gi√° v√† di·ªÖn vi√™n theo t·ª´ng th√°ng.

H√£y ph√¢n t√≠ch v√† vi·∫øt m·ªôt b√°o c√°o t·ªïng k·∫øt nƒÉm 2025, bao g·ªìm:

1. TƒÉng tr∆∞·ªüng t·ªïng th·ªÉ so v·ªõi nƒÉm tr∆∞·ªõc (c√≥ th·ªÉ ∆∞·ªõc l∆∞·ª£ng n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu nƒÉm tr∆∞·ªõc).
2. C√°c th√°ng n·ªïi b·∫≠t.
3. Nh·∫≠n ƒë·ªãnh xu h∆∞·ªõng chung.
4. G·ª£i √Ω c·∫£i ti·∫øn.

D·ªØ li·ªáu:
`;

        const fullPrompt = prompt + JSON.stringify(data, null, 2);

        // Call the Gemini API
        console.log("PDF_REPORT - Calling Gemini API");
        const model = genAI.getGenerativeModel({ model: "gemini-pro" });
        const result = await model.generateContent(fullPrompt);
        console.log("PDF_REPORT - Received response from Gemini");
        const response = await result.response;
        const text = response.text();
        console.log("PDF_REPORT - Report text generated");

        return text;
    } catch (error) {
        console.error("PDF_REPORT - Error generating report with Gemini:", error);
        throw new Error("Failed to generate report with Gemini");
    }
}

// Create a PDF from the generated report
async function createPDF(reportText) {
    return new Promise((resolve, reject) => {
        try {
            console.log("PDF_REPORT - Starting PDF creation");

            // Create a temporary file path
            const tempDir = os.tmpdir();
            const filePath = path.join(tempDir, `report-${Date.now()}.pdf`);
            console.log("PDF_REPORT - PDF will be saved to:", filePath);

            // Create a new PDF document
            const doc = new PDFDocument({ margin: 50 });
            const writeStream = fs.createWriteStream(filePath);

            // Pipe the PDF output to the file
            doc.pipe(writeStream);

            // Add title
            doc.fontSize(25).text("B√°o C√°o T·ªïng K·∫øt NƒÉm 2025", {
                align: "center"
            });

            // Add date
            doc.fontSize(12).text(`Ng√†y t·∫°o: ${new Date().toLocaleDateString("vi-VN")}`, {
                align: "center"
            });

            doc.moveDown(2);

            // Add report content with appropriate formatting
            doc.fontSize(12).text(reportText, {
                align: "left",
                paragraphGap: 10,
                lineGap: 5
            });

            doc.moveDown();

            // Add footer
            doc.fontSize(10).text("¬© 2025 - B√°o c√°o ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi h·ªá th·ªëng", {
                align: "center"
            });

            // Finalize the PDF
            doc.end();
            console.log("PDF_REPORT - PDF creation completed, waiting for file to be written");

            // Wait for the file to be fully written
            writeStream.on("finish", () => {
                console.log("PDF_REPORT - PDF file write completed");
                resolve(filePath);
            });

            writeStream.on("error", (error) => {
                console.error("PDF_REPORT - Error writing PDF file:", error);
                reject(error);
            });
        } catch (error) {
            console.error("PDF_REPORT - Error creating PDF:", error);
            reject(error);
        }
    });
}

// API route handler for generating report
export async function POST(request) {
    try {
        console.log("PDF_REPORT - Received API request");

        // Get the chat ID from the request body
        const body = await request.json();
        const { chatId } = body;
        console.log("PDF_REPORT - Request with chatId:", chatId);

        if (!chatId) {
            console.log("PDF_REPORT - Missing chatId in request");
            return NextResponse.json(
                { error: "Chat ID is required" },
                { status: 400 }
            );
        }

        // Send an initial message to the user
        console.log("PDF_REPORT - Sending initial message to user");
        try {
            await bot.sendMessage(
                chatId,
                "‚åõ ƒêang t·∫°o b√°o c√°o... Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t."
            );
            console.log("PDF_REPORT - Initial message sent successfully");
        } catch (telegramError) {
            console.error("PDF_REPORT - Error sending initial message:", telegramError);
            return NextResponse.json(
                { error: "Failed to send message via Telegram API" },
                { status: 500 }
            );
        }

        // Get data for the report (from DB or sample data)
        const data = getSampleData();

        // Generate the report using Gemini
        let reportText;
        try {
            reportText = await generateReportWithGemini(data);
        } catch (geminiError) {
            console.error("PDF_REPORT - Gemini report generation failed:", geminiError);
            await bot.sendMessage(
                chatId,
                "‚ùå C√≥ l·ªói khi t·∫°o n·ªôi dung b√°o c√°o. Vui l√≤ng th·ª≠ l·∫°i sau."
            );
            return NextResponse.json(
                { error: "Failed to generate report content" },
                { status: 500 }
            );
        }

        // Create a PDF file with the report
        let pdfFilePath;
        try {
            pdfFilePath = await createPDF(reportText);
        } catch (pdfError) {
            console.error("PDF_REPORT - PDF creation failed:", pdfError);
            await bot.sendMessage(
                chatId,
                "‚ùå C√≥ l·ªói khi t·∫°o file PDF. Vui l√≤ng th·ª≠ l·∫°i sau."
            );
            return NextResponse.json(
                { error: "Failed to create PDF file" },
                { status: 500 }
            );
        }

        // Send the PDF document to the user via Telegram
        try {
            console.log("PDF_REPORT - Sending PDF file to user");
            await bot.sendDocument(chatId, pdfFilePath, {
                caption: "üìä B√°o c√°o t·ªïng k·∫øt nƒÉm 2025 c·ªßa b·∫°n ƒë√£ s·∫µn s√†ng!"
            });
            console.log("PDF_REPORT - PDF file sent successfully");
        } catch (sendError) {
            console.error("PDF_REPORT - Error sending document:", sendError);
            await bot.sendMessage(
                chatId,
                "‚ùå C√≥ l·ªói khi g·ª≠i file b√°o c√°o. Vui l√≤ng th·ª≠ l·∫°i sau."
            );
            return NextResponse.json(
                { error: "Failed to send document via Telegram API" },
                { status: 500 }
            );
        } finally {
            // Delete the temporary file
            try {
                fs.unlinkSync(pdfFilePath);
                console.log("PDF_REPORT - Temporary file deleted");
            } catch (unlinkError) {
                console.error("PDF_REPORT - Error deleting temporary file:", unlinkError);
            }
        }

        return NextResponse.json({
            status: "success",
            message: "Report generated and sent successfully"
        });
    } catch (error) {
        console.error("PDF_REPORT - Unhandled error in route handler:", error);
        return NextResponse.json(
            { error: "Failed to generate report" },
            { status: 500 }
        );
    }
} 